[[extend 'layout.html']]

<button type="button" onclick="window.open(  window.location.href  );">new tab</button>
<button id="breaj_but" type="button" onclick="window.location.reload(true);">reload</button>


<p>./py4web.py run apps --watch=off -s wsgirefThreadingServer</p>
<p id='gen_id'></p>

<div id="chart" style="width: 70%; height: 200px;"></div>

[[block page_scripts]]

    <script src="https://cdn.jsdelivr.net/npm/d3-array@3"></script>
    <script src="https://cdn.jsdelivr.net/npm/d3-color@3"></script>
    <script src="https://cdn.jsdelivr.net/npm/d3-format@3"></script>
    <script src="https://cdn.jsdelivr.net/npm/d3-interpolate@3"></script>
    <script src="https://cdn.jsdelivr.net/npm/d3-time@3"></script>
    <script src="https://cdn.jsdelivr.net/npm/d3-time-format@4"></script>
    <script src="https://cdn.jsdelivr.net/npm/d3-scale@4"></script>
    <script src="https://cdn.jsdelivr.net/npm/d3-selection@3"></script>
    <script src="https://cdn.jsdelivr.net/npm/d3-axis@3"></script>
    <script src="https://huww98.github.io/TimeChart/dist/timechart.min.js"></script>

<!-- https://github.com/huww98/TimeChart  -->

<script>

  ! function(data_url) {

           const colors = ["red", "green", "blue", 'black', 'orange', 'violet', 'navy', 'magenta', 'navy',
                          'brown', 'salmon', 'coral', 'indigo', 'maroon', 'olive', 'peru','plum', 'tan' ];

           const random = Math.floor(Math.random() * colors.length);

           const mydata = [];
           const chart = new TimeChart( document.getElementById('chart') , {
                baseTime: Date.now() - performance.now(),
                series: [{ data:mydata,
                           color:  colors[random], //   'red',
                           name: colors[random],
                           lineWidth: 1,
                         }],
                realTime: true,
                xRange: { min: 0, max: 60 },
                yRange: { min: 10, max: 90 },

                // tooltip: true
           });



// reconnectFrequencySeconds doubles every retry
let reconnectFrequencySeconds = 1;
let evtSource;


function isFunction(functionToCheck) {
  return functionToCheck && {}.toString.call(functionToCheck) === '[object Function]';
}

function debounce(func, wait) {
    let timeout;
    let waitFunc;

    return function() {
        if (isFunction(wait)) {
            waitFunc = wait;
        }
        else {
            waitFunc = function() { return wait };
        }

        let context = this, args = arguments;
        let later = function() {
            timeout = null;
            func.apply(context, args);
        };
        clearTimeout(timeout);
        timeout = setTimeout(later, waitFunc());
    };
}

const reconnectFunc = debounce(function() {
    setupEventSource();
    // Double every attempt to avoid overwhelming server
    reconnectFrequencySeconds *= 2;
    // Max out at ~1 minute as a compromise between user experience and server load
    if (reconnectFrequencySeconds >= 64) {
        reconnectFrequencySeconds = 64;
    }
}, function() { return reconnectFrequencySeconds * 1000 });

function setupEventSource() {
    evtSource = new EventSource( data_url   /* URL here */); 
    evtSource.onmessage = function(e) {
      // Handle even here

                 const chart_data = JSON.parse(e.data);
                 mydata.push({x: chart_data.x , y: chart_data.y});
                 chart.update();

                 const fs= '1.1em';

                 document.getElementById("gen_id").style.fontSize = fs;
                 document.getElementById("gen_id").innerHTML = 'Generator id: ' + chart_data.gen_id + ';   '+ chart_data.time;



    };
    evtSource.onopen = function(e) {
      // Reset reconnect frequency upon successful connection
      reconnectFrequencySeconds = 1;
    };
    evtSource.onerror = function(e) {
      evtSource.close();
      reconnectFunc();
    };
}
setupEventSource();

   } ( "[[=stream_url ]]" ) 

</script>

[[end]]

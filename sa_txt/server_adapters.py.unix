import logging
import os
import ssl
import sys

from ombott.server_adapters import ServerAdapter

try:
    from .utils.wsservers import *
except ImportError:
    wsservers_list = []

__all__ = [
    "gunicorn",
    "gunicornGevent",
    "gevent",
    "geventWebSocketServer",
    "geventWs",  # short_name
    "wsgirefThreadingServer",
    "wsgiTh",  # short_name
    "rocketServer",
] + wsservers_list

# ---------------------- utils -----------------------------------------------

# export PY4WEB_LOGS=/tmp # export PY4WEB_LOGS=
def get_log_file(out_banner=True):
    log_dir = os.environ.get("PY4WEB_LOGS", None)
    if log_dir and os.path.isdir(log_dir):
        log_file = os.path.join(log_dir, "server-py4web.log")
        if out_banner:
            print(f"log_file: {log_file}")
        return log_file
    return None


def check_level(level):

    # lib/python3.7/logging/__init__.py
    # CRITICAL = 50
    # FATAL = CRITICAL
    # ERROR = 40
    # WARNING = 30
    # WARN = WARNING
    # INFO = 20
    # DEBUG = 10
    # NOTSET = 0

    return (
        level
        if level
        in (
            logging.CRITICAL,
            logging.ERROR,
            logging.WARN,
            logging.INFO,
            logging.DEBUG,
            logging.NOTSET,
        )
        else logging.WARN
    )


def logging_conf(level=logging.WARN, logger_name=__name__, fmode="w", test_log=False):

    log_file = get_log_file()
    log_to = dict()

    if log_file:
        if sys.version_info >= (3, 9):
            log_to["filename"] = log_file
            log_to["filemode"] = fmode
            log_to["encoding"] = "utf-8"
        else:
            try:
                h = logging.FileHandler(log_file, mode=fmode, encoding="utf-8")
                log_to.update({"handlers": [h]})
            except (LookupError, KeyError, ValueError) as ex:
                print(f"{ex}, bad  encoding {__file__}")
                pass

    short_msg = "%(message)s > %(asctime)s.%(msecs)03d"
    #short_msg = "%(message)s > %(threadName)s > %(asctime)s.%(msecs)03d"
    # long_msg = short_msg + " > %(funcName)s > %(filename)s:%(lineno)d > %(levelname)s"

    time_msg = "%H:%M:%S"
    # date_time_msg = '%Y-%m-%d %H:%M:%S'

    try:
        logging.basicConfig(
            format=short_msg, datefmt=time_msg, level=check_level(level), **log_to,
        )
    except (OSError, LookupError, KeyError, ValueError) as ex:
        print(f"{ex}, {__file__}")
        print(f"cannot open {log_file}")
        logging.basicConfig(
            format="%(message)s", level=check_level(level),
        )

    if logger_name is None:
        return None

    log = logging.getLogger("SA:" + logger_name)
    log.propagate = True

    if test_log:
        for func in (
            log.debug,
            log.info,
            log.warn,
            log.error,
            log.critical,
        ):
            func("func: " + func.__name__)

    return log


def get_workers(opts, default=10):
    try:
        return opts["workers"] if opts["workers"] else default
    except KeyError:
        return default

# ---------------------- support unix:/tmp/p4w.sock  -------------------------------

def unlink_file(path, log):        
    try:
        path and os.unlink( path )
    except ( IOError, OSError) as ex:
       if log is None:
           sys.exit( f'{ex}\nError: {path}' )
       log.info ( f"{ex}\nFailed to delete {path}" )


def check_port(host='127.0.0.1', port=8000, quiet=False, caller_class='unknown' ):
    import socket, errno, subprocess

    def os_cmd (run_cmd ):
        try:
           subprocess.run( run_cmd , shell=True, check = True, text=True, )
        except subprocess.CalledProcessError :
           pass

    if host.startswith('unix:/'):
        srv_set = { 'GunicornServer', 'GeventServer', 
                    'GeventWebSocketServer', 'WSGIRefThreadingServer' }

        if caller_class not in srv_set :
            sys.exit(f'Error: try {srv_set}  with {host}')

        if caller_class in ('GeventServer', 'GeventWebSocketServer', 
                   'WSGIRefThreadingServer') and (not port in (0, 1, 2, 3)):
            port = 2

        socket_path = host[5:]
        if os.path.exists(socket_path):
            os_cmd ( f"echo -n 'file exists > '  && ls -alFi {socket_path}" )

            if port == 0:
                print (os.stat(socket_path))
                #print ( "access os.F_OK: ", os.access(  socket_path , os.F_OK) )
                sys.exit(f"can't run {server_class}: {socket_path} exists")
            elif port == 1:
                os_cmd ("ps -ef | head -1; ps -ef | grep py4web | grep -v grep")
                os_cmd (f"lsof -w {socket_path}")
            elif port == 2:
                unlink_file( socket_path, None )
            elif port == 3:
                unlink_file( get_log_file( out_banner = False ) , None )

        (not quiet) and print (f'Listening at: {host}')
        return

    s = socket.socket(socket.AF_INET, socket.SOCK_STREAM)
    try:
        s.bind((host, int(port) ))
    except socket.error as e:
        if e.errno == errno.EADDRINUSE:
            #os_cmd( f"command -v lsof >/dev/null 2>&1 && ps aux | grep py4web | grep -v grep && lsof -nPi:{port}" )
            os_cmd( f"command -v lsof >/dev/null 2>&1 && ps -ef | head -1; ps -ef |"
                    f" grep py4web | grep -v grep && lsof -nPi:{port}" )
            sys.exit(f"{host}:{port} is already in use")
        else:
            sys.exit(f"{e}\n{host}:{port} cannot be acessed")
    s.close()

def set_bind_Umask(bind_func, bind_param):
    try:
        old_umask = os.umask(0)
        bind_func(bind_param)
        os.umask(old_umask)
    except OSError as ex:
        sys.exit(f'{ex}\nCannot set umask=0')



# ---------------------- servers -----------------------------------------------

def gunicorn():
    from gevent import local  # pip install gevent gunicorn setproctitle
    import threading

    if isinstance(threading.local(), local.local):
        print("gunicorn: monkey.patch_all() applied")

    class GunicornServer(ServerAdapter):
        def run(self, app_handler):
            try:
                from gunicorn.app.base import Application
            except ImportError as ex:
                sys.exit(f"{ex}\nTry: pip install gunicorn gevent setproctitle")

            from ast import literal_eval

            check_port(self.host, self.port, self.quiet, self.__class__.__name__ )

            logger = None

            sa_bind = self.host if self.host.startswith('unix:/') else f"{self.host}:{self.port}"

            sa_config = {
                "bind": sa_bind, # f"{self.host}:{self.port}",
                "workers": get_workers(self.options),
                "certfile": self.options.get("certfile", None),
                "keyfile": self.options.get("keyfile", None),
                "accesslog": None,
                "errorlog": None,
                "proc_name": "sa_py4web",  # ps a | grep py4web
                "config": "sa_config",
                # ( 'sa_config',  'GUNICORN_', 'gunicorn.saenv', 'gunicorn.conf.py' )
            }

            if os.path.isdir('/dev/shm'):
                sa_config.update( { "worker_tmp_dir":"/dev/shm", } )

            if not self.quiet:
                level = check_level(self.options["logging_level"])
                log_file = get_log_file(out_banner=False)

                logger = logging_conf(level)
                log_to = "-" if log_file is None else log_file

                sa_config.update(
                    {
                        "loglevel": logging.getLevelName(level),
                        "access_log_format": '%(h)s %(l)s %(u)s %(t)s "%(r)s" %(s)s %(b)s "%(f)s" [%(a)s]',
                        "accesslog": log_to,
                        "errorlog": log_to,
                    }
                )

            class GunicornApplication(Application):
                def get_gunicorn_options(
                    self,
                    gu_default="gunicorn.conf.py",
                    env_file="gunicorn.saenv",
                    env_key="GUNICORN_",
                ):

                    def get_file_data(dict_file):
                        try:
                           with open(dict_file, "r") as f:
                                return f.read()
                        except (IOError, OSError) as ex:
                            sys.exit(f"{ex}\nError: {dict_file}")


                    gu_raw_env = dict()
                    def check_kv(kx, vx, sr_env = gu_raw_env):
                        if ( not kx ) or ( not vx )  or ( kx in ( 'bind', 'config', 'cmd_args' )) :
                            logger and logger.debug (f"gunicorn: skipped {kx}={vx}")
                            return None, None
                        try:
                            if vx in ('None','True','False') or (vx.startswith('{') and vx.endswith('}')):
                                vx = literal_eval(vx )
                            elif kx in ( 'raw_env', 'raw_paste_global_conf' ) and '=' in vx :
                                sr_env.update ( {e.split('=',1)[0].strip(): e.split('=',1)[1].strip()
                                                    for e in vx.split(',') } )
                            elif kx == 'logconfig_dict_file':
                                # GUNICORN_logconfig_dict_file=dict_file_name
                                # dict_file format { 'logconf_dict' :  {......} }
                                kx, vx  = 'logconfig_dict' ,  literal_eval(get_file_data (vx) ) 
                            else :
                                for ke, ve in sr_env.items():
                                    vx = vx.replace(ke, ve)
                        except (ValueError, AttributeError, IndexError ) :
                            pass
                        #print (sr_env)
                        return kx, vx

                    if os.path.isfile(gu_default):
                        return {"use_python_config": gu_default, "config": gu_default}

                    res_opts = dict()

                    if os.path.isfile(env_file):
                        lines = get_file_data( env_file ).splitlines()
                        for line in lines:
                            line = line.strip()
                            if not line or line.startswith(("#", "[")):
                                continue
                            for e in ("export ", env_key):
                                line = line.replace(e, "", 1)
                            k, v = None, None
                            try:
                                k, v = line.split("=", 1)
                                k, v = k.strip().lower(), v.strip()
                            except (ValueError, AttributeError):
                                continue
                            k, v = check_kv(k, v)
                            if k is None:
                                continue
                            res_opts[k] = v

                        if res_opts:
                            res_opts["config"] = env_file
                            return res_opts

                    for k, v in os.environ.items():
                        if k.startswith(env_key):
                            k = k.split("_", 1)[1].lower()
                            k, v = check_kv(k, v)
                            if k is None:
                                continue
                            res_opts[k] = v

                    if res_opts:
                        res_opts["config"] = env_key

                    return res_opts

                def load_config(self):
                    sa_config.update(self.get_gunicorn_options())
                    logger and logger.debug(sa_config)

                    for k, v in sa_config.items():
                        if k not in self.cfg.settings:
                            continue
                        self.cfg.set(k, v)

                    for e in (
                        "use_python_config",
                        "usepy",
                    ):
                        if e in sa_config:
                            Application.load_config_from_file(self, sa_config[e])
                            break

                def load(self):
                    return app_handler

            GunicornApplication().run()

    return GunicornServer


gunicornGevent = gunicorn


def gevent():
    # gevent version 23.9.1

    import threading

    from gevent import local, pywsgi  # pip install gevent

    if not isinstance(threading.local(), local.local):
        msg = "Ombott requires gevent.monkey.patch_all() (before import)"
        raise RuntimeError(msg)

    # ./py4web.py run apps --watch=off -s gevent -L 20
    #
    # ./py4web.py run apps -s gevent --watch=off --port=8443 --ssl_cert=cert.pem --ssl_key=key.pem -L 0
    # ./py4web.py run apps -s gevent --watch=off --host=192.168.1.161 --port=8443 --ssl_cert=server.pem -L 0

    class GeventServer(ServerAdapter):
        def run(self, app_handler):
            from gevent import socket as gev_socket

            check_port(self.host, self.port, self.quiet, self.__class__.__name__ )

            logger = None  # "default"

            if not self.quiet:
                logger = logging_conf(self.options["logging_level"], "gevent",)
                # logger.addHandler(logging.StreamHandler())

            ssl_args = dict()
            certfile = self.options.get("certfile", None)

            if certfile:
                ssl_args.update ({
                    'certfile': certfile,
                    'keyfile': self.options.get("keyfile", None),
                    'ssl_version': ssl.PROTOCOL_SSLv23,
                    'server_side': True,
                    'do_handshake_on_connect':False,
                })

            listener = self.host, self.port 

            socket_path = None 
            if self.host.startswith('unix:/'):
                listener = gev_socket.socket(gev_socket.AF_UNIX, gev_socket.SOCK_STREAM)
                socket_path = self.host[5:]
                set_bind_Umask(  listener.bind , socket_path )    
                listener.listen(1)

            server = pywsgi.WSGIServer(
                listener,
                app_handler,
                log=logger,
                error_log=logger,
                **ssl_args,
            )

            try:
                server.serve_forever()
            finally:
                unlink_file(socket_path, logger)

    return GeventServer


def geventWebSocketServer():
    from gevent import pywsgi

    # from geventwebsocket.handler import WebSocketHandler # pip install gevent-websocket
    from gevent_ws import WebSocketHandler  # pip install gevent gevent-ws

    # https://stackoverflow.com/questions/5312311/secure-websockets-with-self-signed-certificate
    # https://pypi.org/project/gevent-ws/
    # ./py4web.py run apps -s geventWebSocketServer --watch=off --ssl_cert=server.pem -H 192.168.1.161 -P 9000 -L 10
    # vi apps/_websocket/templates/index.html    set: ws, wss, host, port
    # firefox http://localhost:8000/_websocket
    # firefox https://192.168.1.161:9000/_websocket  test wss
    # curl --insecure -I -H 'Upgrade: websocket' \
    #   -H "Sec-WebSocket-Key: `openssl rand -base64 16`" \
    #   -H 'Sec-WebSocket-Version: 13' \
    #   -sSv  https://192.168.1.161:9000/

    class GeventWebSocketServer(ServerAdapter):
        def run(self, app_handler):
            from gevent import socket as gev_socket

            logger = None  # "default"

            if not self.quiet:
                logger = logging_conf(self.options["logging_level"], "gevent-ws",)

            ssl_args = dict()
            certfile = self.options.get("certfile", None)

            if certfile:
                ssl_args.update ({
                    'certfile': certfile,
                    'keyfile': self.options.get("keyfile", None),
                    'ssl_version': ssl.PROTOCOL_SSLv23,
                    'server_side': True,
                    'do_handshake_on_connect':False,
                })

            listener = self.host, self.port

            socket_path = None 
            if self.host.startswith('unix:/'):
                listener = gev_socket.socket(gev_socket.AF_UNIX, gev_socket.SOCK_STREAM)
                socket_path = self.host[5:] 
                set_bind_Umask(  listener.bind , socket_path )    
                listener.listen(1)


            server = pywsgi.WSGIServer(
                listener, 
                app_handler,
                handler_class=WebSocketHandler,
                log=logger,
                error_log=logger,
                **ssl_args,
            )

            try:
                server.serve_forever()
            finally:
                unlink_file(socket_path, logger)

    return GeventWebSocketServer


geventWs = geventWebSocketServer


def wsgirefThreadingServer():
    # https://www.electricmonk.nl/log/2016/02/15/multithreaded-dev-web-server-for-the-python-bottle-web-framework/

    import socket
    #from concurrent.futures import ThreadPoolExecutor  # pip install futures
    from ThreadPoolExecutorPlus import ThreadPoolExecutor # pip install ThreadPoolExecutorPlus
    from socketserver import ThreadingMixIn, TCPServer
    from wsgiref.simple_server import WSGIRequestHandler, WSGIServer, ServerHandler

    """

p4w_path="$HOME/py4web-w/py4web"

alias sgev="cd $p4w_path && ./py4web.py run apps  -H 'unix:/tmp/p4w.sock' -s gevent --watch=off -L 20"
alias sgun="cd $p4w_path && ./py4web.py run apps  -H 'unix:/tmp/p4w.sock'  -w 4 -L 10"
alias swsgi="cd $p4w_path &&  ./py4web.py run apps -H 'unix:/tmp/p4w.sock' -s wsgirefThreadingServer -w 10 -L 10"
alias hwsgi="cd $p4w_path &&  ./py4web.py run apps -s wsgirefThreadingServer -w 10 -L 10"

asgi_todo() { time for ((i=1;i<=$1;i++)); do curl --silent -A "$i-curl" http://localhost:8000/todo --output /dev/null ;  done ; }
asgi_todo_sock() { time for ((i=1;i<=$1;i++)); do curl --silent --unix-socket /tmp/p4w.sock -A "$i-curl" "localhost/todo" --output /dev/null ; done }

alias atail="tail -f /tmp/server-py4web.log"
alias gettodo="curl --silent --unix-socket /tmp/p4w.sock localhost/todo"
# for ((i=1;i<=10;i++)); do curl --silent --unix-socket /tmp/p4w.sock  "localhost/todo" --output /dev/null ; done
xcurl() { time for ((i=1;i<=$1;i++)); do curl --silent --unix-socket /tmp/p4w.sock -A "$i-curl" "localhost/todo" --output /dev/null ; done }
mcurl() { for ((i=0; i < $1; i++)); do xcurl $2  &  done  ; }


    """

    # https://etherealwake.com/2020/12/wsgiref-unix-domain-sockets/
    class NewServerHandler(ServerHandler):
        os_environ = {}
    
    class NewWSGIServer(WSGIServer):

        socket_path = None

        def get_addr_family(self, server_address):

            #if not isinstance( server_address, tuple ):
            #    raise RuntimeError( f"Bad type: {server_address}" )

            host=server_address[0]
            if host.startswith('unix:/'):
                NewWSGIServer.socket_path = host[5:]
                return host[5:], socket.AF_UNIX 
            elif ":" in host:  
                return server_address, socket.AF_INET6
            else:
                return server_address, socket.AF_INET

        def __init__(self, server_address, RequestHandlerClass, ):
            # Override Address Family
            _ , self.address_family = self.get_addr_family( server_address ) 
            WSGIServer.__init__(self, server_address, RequestHandlerClass)
    
        def server_bind(self):
            # Expand HTTPServer's handling of address families
            self.server_address, _  = self.get_addr_family( self.server_address ) 
            set_bind_Umask(  TCPServer.server_bind, self )    

            if self.address_family == socket.AF_UNIX:
                server_name = socket.gethostname() # jin
                self.server_port = 0
            else:
                server_name = self.server_address[0]
                self.server_port = self.server_address[1]
            self.server_name = socket.getfqdn(server_name)
            self.setup_environ()


    class NewWSGIRequestHandler(WSGIRequestHandler):
        def __init__(self, request, client_address, server):
            self.address_family = server.address_family
            if self.address_family == socket.AF_UNIX:
                client_address = '<unix>', 0
            WSGIRequestHandler.__init__(self, request, client_address, server)            

        def quiet_handle(self):
            self.raw_requestline = self.rfile.readline(65537)
            if len(self.raw_requestline) > 65536:
                self.requestline = ''
                self.request_version = ''
                self.command = ''
                self.send_error(414)
                return
            if not self.parse_request():
                return
            handler = NewServerHandler(
                self.rfile, self.wfile, self.get_stderr(), self.get_environ(),
                multithread=False,
            )
            handler.request_handler = self
            handler.run(self.server.get_app())            
     
    class WSGIRefThreadingServer(ServerAdapter):
        def run(self, app_handler):

            check_port(self.host, self.port, self.quiet, self.__class__.__name__ )

            logger = None

            if not self.quiet:
                logger = logging_conf(self.options["logging_level"], )

            self_run = self  # used in internal classes to access options and logger

            class PoolMixIn(ThreadingMixIn):
                def process_request(self, request, client_address):
                    self.pool.submit( self.process_request_thread, request, client_address )

            class ThreadingWSGIServer(PoolMixIn, NewWSGIServer):
                daemon_threads = True
                pool = ThreadPoolExecutor( max_workers=get_workers(self.options, default=40))
                #pool.set_daemon_opts(min_workers = 2 , max_workers = 40 , keep_alive_time = 20)

            class Server(NewWSGIServer):
                timeout = 33
                def __init__( self, server_address=("127.0.0.1", 8000), request_handler=None, ):
                    self.wsgi_app = None
                    self.server_address = server_address
                    self.request_handler = request_handler

                def set_app(self, wsgi_app):
                    self.wsgi_app = wsgi_app

                def get_app(self):
                    return self.wsgi_app

                def server_close(self):
                    #print (self.server.socket.gettimeout() )
                    self.server.socket.close()
                    unlink_file(super().socket_path, logger)

                def serve_forever(self):

                    with ThreadingWSGIServer(self.server_address,  self.request_handler,) as self.server:
                        self.server.socket.settimeout(self.timeout)
                        self.server.set_app(app_handler)
                    
                        # openssl req -newkey rsa:4096 -new -x509 -keyout server.pem -out server.pem -days 365 -nodes
                        # openssl req -x509 -newkey rsa:4096 -nodes -out cert.pem -keyout key.pem -days 365
                        # openssl s_client -showcerts -connect 127.0.0.1:8443

                        certfile = self_run.options.get("certfile", None)

                        if certfile:
                            self.server.socket = ssl.wrap_socket(
                                self.server.socket,
                                certfile=certfile,
                                keyfile=self_run.options.get("keyfile", None),
                                ssl_version=ssl.PROTOCOL_SSLv23,
                                server_side=True,
                                do_handshake_on_connect=False,
                            )

                        self.server.serve_forever()

            class LogHandler(NewWSGIRequestHandler):

                if self_run.quiet:
                    def handle(self):
                        super().quiet_handle()

                def address_string(self):  # Prevent reverse DNS lookups please.
                    return self.client_address[0]

                def log_request(self, *args, **kw):
                    if not self_run.quiet:
                        return super().log_request( *args, **kw)

                def log_message(self, format, *args):
                    if  not self_run.quiet :  # and ( not args[1] in ['200', '304']) :
                        agent = self.headers['User-Agent'] 
                        msg = f"{self.client_address[0]} - - \"{args[0][0:-9]}\" " \
                        f"{args[1]} {args[2]} [{agent}]"
                        logger and logger.info(msg)

            with Server((self_run.host,self_run.port), LogHandler,  ) as server:
                server.set_app(app_handler)
                server.serve_forever()

    return WSGIRefThreadingServer


wsgiTh = wsgirefThreadingServer


def rocketServer():
    try:
        from rocket3 import Rocket3 as Rocket
    except ImportError:
        from .rocket3 import Rocket3 as Rocket

    class RocketServer(ServerAdapter):
        def run(self, app_handler):

            check_port(self.host, self.port, self.quiet, self.__class__.__name__ )

            if not self.quiet:

                logging_conf(self.options["logging_level"],)

            interface = (
                (
                    self.host,
                    self.port,
                    self.options["keyfile"],
                    self.options["certfile"],
                )
                if (
                    self.options.get("certfile", None)
                    and self.options.get("keyfile", None)
                )
                else (self.host, self.port)
            )

            server = Rocket(interface, "wsgi", dict(wsgi_app=app_handler))
            server.start()

    return RocketServer


"""
# how to write to server-adapters.log from controllers.py
# cp -a _scaffold test-salog

import sys
import logging
from .common import logger
from .settings import APP_NAME
from threading import Lock


_srv_log=None
def log_info(mess, dbg=True, ):
    def salog(pat='SA:'):
        global _srv_log
        if _srv_log and isinstance( _srv_log, logging.Logger ):
           return _srv_log
        hs= [e for e in logging.root.manager.loggerDict if e.startswith(pat) ]
        if len(hs) == 0:
            return logger

        sa_lock = Lock()
        with sa_lock:
            _srv_log = logging.getLogger(hs[0])

        return _srv_log

    caller = f" > {APP_NAME} > {sys._getframe().f_back.f_code.co_name}"
    dbg and salog().info(mess + caller)

log_warn=log_info
log_debug=log_info

log_warn('0'* 30 + ' ' +APP_NAME)

@action("index")
@action.uses("index.html", auth, T)
def index():

    log_warn('7'* 30 + ' ' +APP_NAME)
    log_info('9'* 30 + ' ' +APP_NAME)

    user = auth.get_user()
    message = T("Hello {first_name}").format(**user) if user else T("Hello")
    actions = {"allowed_actions": auth.param.allowed_actions}
    return dict(message=message, actions=actions)

"""
